-- Tagesaufgabe Normalisierung

/*
   Dir liegt die Datei my_sql_shop.csv vor mit Daten in nicht-normalisierter Form.
   Führe folgende Schritte durch:
   1. Erstelle eine Datenbank 'my_shop', in die alle Daten kommen.
   2. Kopiere die Daten aus der CSV in eine Tabelle 'unnormalized_shop'.
   3. Überführe die Daten in die erste Normalform (eine große Tabelle).
   4. Überführe die Daten in die zweite Normalform und falls nötig weiter in die dritte Normalform.
   Vergiss nicht, Primärschlüssel zu setzen.

   Es ist dir überlassen, ob du die Daten in SQL oder in Excel normalisierst.
   Solltest du sie in Excel normalisieren, dann importiere im Nachgang alle Tabellen in 'my_shop'.
 */

---------------------------------------------------------------------
-- Schritt 1: Import der nicht-normalisierten Daten in eine Tabelle
-- aus einer CSV-Datei mittels COPY
---------------------------------------------------------------------

-- Neue Datenbank erstellen:
-- DROP DATABASE IF EXISTS my_shop;

-- CREATE DATABASE my_shop;

-- Neue Tabelle erstellen:
DROP TABLE IF EXISTS unnormalized_shop;

CREATE TABLE IF NOT EXISTS unnormalized_shop
(
	order_id         SMALLINT,
	customer_name    VARCHAR(120),
	product_name     VARCHAR(30),
	product_price    SMALLINT,
	order_date       DATE,
	product_category VARCHAR(25),
	customer_mail    VARCHAR(100),
	address          VARCHAR(120),
	employee_name    VARCHAR(120),
	employee_phone   VARCHAR(120)
);

-- Daten in die Tabelle importieren
-- Wichtig: Damit der Import so klappt, müssen die Spalten in der CSV und die Spalten
-- der angelegten Tabelle absolut gleich heißen!
COPY unnormalized_shop
	FROM 'C:\Users\Admin\OneDrive\Dokumente\DataCraft\DataAnalyst_Aug.24\08_Datenbanken_und_SQL\Tag_12_Normalisierung\Tutorium\my_sql_shop.csv'
	DELIMITER ';'
	CSV HEADER;
-- Falls Zugriff verweigert wird:
-- https://www.commandprompt.com/education/how-to-fix-permission-denied-error-while-importing-a-csv-file-in-postgresql/
-- Hinweis: 'Jeder' statt 'Everyone' eintragen.

-------------------------------------------------------------------
/* Schritt 2:
Umwandlung zu 1. Normalform (1NF)!
*/
-------------------------------------------------------------------

-- Tabelle erstellen aus einem SELECT mit CREATE TABLE AS:
DROP TABLE IF EXISTS shop_1nf;

CREATE TABLE shop_1nf AS
	(SELECT order_id,
			SPLIT_PART(customer_name, ', ', 1) AS customer_name,
			SPLIT_PART(customer_name, ', ', 2) AS customer_firstname,
			product_name,
			product_price,
			order_date,
			product_category,
			address,
			SPLIT_PART(employee_name, ', ', 1) AS employee_name,
			SPLIT_PART(employee_name, ', ', 2) AS employee_firstname,
			employee_phone
	 FROM unnormalized_shop);

/*
Umwandlung zur 2. Normalform (2NF)!
*/

-- Tabelle 1: customers

DROP TABLE IF EXISTS customers;

-- Tabelle erstellen:
CREATE TABLE customers AS
	(SELECT DISTINCT customer_name, customer_firstname
	 FROM shop_1nf);

-- ID-Spalte als Primärschlüssel hinzufügen:
ALTER TABLE customers
	ADD COLUMN customer_id INT PRIMARY KEY
		GENERATED BY DEFAULT AS IDENTITY;

-- Tabelle 2: products

DROP TABLE IF EXISTS products;

CREATE TABLE products AS
	(SELECT DISTINCT product_name,
					 product_category,
					 product_price
	 FROM shop_1nf);

ALTER TABLE products
	ADD COLUMN product_id INT PRIMARY KEY
		GENERATED BY DEFAULT AS IDENTITY;

SELECT *
FROM products;

-- Zusatzschritt möglich: categories-Tabelle (für 3. Normalform!)

DROP TABLE IF EXISTS categories;

-- Tabelle erstellen:
CREATE TABLE categories
AS
SELECT DISTINCT product_category
FROM products;

-- Kategorien-ID hinzufügen:
ALTER TABLE categories
	ADD COLUMN category_id INT PRIMARY KEY
		GENERATED BY DEFAULT AS IDENTITY;

-- Tabelle erstellen, die products ersetzen soll:
CREATE TABLE prod_temp
AS (SELECT product_id,
		   product_name,
		   product_price,
		   category_id
	FROM products
			 JOIN categories USING (product_category));

-- products entfernen:
DROP TABLE products;

-- Neue Tabelle in products umbenennen:
ALTER TABLE prod_temp
	RENAME TO products;

-- Tabelle 3: employees

DROP TABLE IF EXISTS employees;

CREATE TABLE employees AS
	(SELECT DISTINCT employee_name,
					 employee_firstname,
					 employee_phone
	 FROM shop_1nf);

ALTER TABLE employees
	ADD COLUMN employee_id INT PRIMARY KEY
		GENERATED BY DEFAULT AS IDENTITY;

-------------------------------------------------------------------
/* Schritt 3:
Reduzierte Faktentabelle erstellen!
*/
-------------------------------------------------------------------

-- Die Faktentabelle:
SELECT order_id,
	   order_date,
	   c.customer_id,
	   e.employee_id,
	   p.product_id
FROM shop_1nf
		 JOIN employees e
			  USING (employee_name, employee_firstname, employee_phone)
		 JOIN customers c
			  USING (customer_name, customer_firstname)
		 JOIN products p
			  USING (product_name, product_price);

-- Die Tabelle erstellen:
CREATE TABLE orders AS (SELECT order_id,
							   order_date,
							   c.customer_id,
							   e.employee_id,
							   p.product_id
						FROM shop_1nf
								 JOIN employees e
									  USING (employee_name, employee_firstname, employee_phone)
								 JOIN customers c
									  USING (customer_name, customer_firstname)
								 JOIN products p
									  USING (product_name, product_price));
